mutate(Time_point = str_extract(Comparison, pattern ="6h|24h")) %>%
mutate(Treatment = case_when(
Comparison %in% c("PD_flag6h_vs_0h", "PD_flag24h_vs_0h") ~ "flag",
Comparison %in% c("PD_aCD36h_vs_0h", "PD_aCD324h_vs_0h") ~ "aCD3",
Comparison %in% c("PD_aCD36h_vs_flag6h" ,"PD_aCD324h_vs_flag24h") ~ "aCD3vsflag"))  %>%
mutate(Gene_name = gsub("(.*);Name=", "", Gene)) %>% mutate(Gene_name = gsub("(\\(E.*)", "", Gene_name)) %>%
mutate(Gene_number = gsub("(;.*)" , "", Gene)) %>% mutate(Gene_number = gsub("ID=fig\\|823.92.peg.", "", Gene_number)) %>% mutate(Gene_number = gsub("\\|", "", Gene_number))
###########################################
############ CUMULATIVE PLOTS #############
###########################################
##### volcano plots flagellin Figure 1E ####
BP_f6 <- BP_flag6h_vs_0h %>% mutate(Organism='BP')
BS_f6 <- BS_flag6h_vs_0h %>% mutate(Organism='BS')
CB_f6 <- CB_flag6h_vs_0h %>% mutate(Organism='CB')
PD_f6 <- PD_flag6h_vs_0h %>% mutate(Organism='PD')
Flag_6h_all <- bind_rows(BP_f6, BS_f6, CB_f6, PD_f6)
flag_counts <- Flag_6h_all %>%
dplyr::group_by(Organism) %>%
dplyr::summarize(n.top=sum(padj<0.05 & log2FoldChange>1,na.rm=TRUE),
n.bottom=sum(padj<0.05 & log2FoldChange< (-1),na.rm=TRUE)) %>%
dplyr::ungroup()
Figure_1E <- Flag_6h_all %>%
mutate(Significant = case_when(
padj > 0.05 | (abs(log2FoldChange) < 1) ~ 'Not Sign',
padj < 0.05 & log2FoldChange > 1 ~ 'UP',
padj < 0.05 & log2FoldChange <(-1) ~ 'DOWN'
)) %>%
arrange(Significant!="Not Sign") %>%
ggplot() +
geom_point(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant), size=3) + theme_bw(base_size=16) +
scale_color_manual(values=c("UP"="firebrick2","Not Sign"="darkgrey", 'DOWN'='dodgerblue3')) +
geom_vline(xintercept = -1, colour="#990000", linetype="dashed") +
geom_vline(xintercept = 1, colour="#990000", linetype="dashed") +
facet_wrap(~factor(Organism, levels=c('CB', 'BP', 'BS', 'PD')), nrow=2) +
geom_text(data=flag_counts,aes(x=4, y=22,  label=n.top, size=6)) +
geom_text(data=flag_counts,aes(x=-3, y=22,  label=n.bottom,  size=6)) +
theme(strip.background = element_blank(), strip.text.y = element_blank())
Figure_1E
BP_aCD36 <- BP_aCD36h_vs_0h %>% mutate(Organism='BP')
BS_aCD36 <- BS_aCD36h_vs_0h %>% mutate(Organism='BS')
CB_aCD36 <- CB_aCD36h_vs_0h %>% mutate(Organism='CB')
PD_aCD36 <- PD_aCD36h_vs_0h %>% mutate(Organism='PD')
aCD3_6h_all <- bind_rows(BP_aCD36, BS_aCD36, CB_aCD36, PD_aCD36)
aCD3_counts <- aCD3_6h_all %>%
dplyr::group_by(Organism) %>%
dplyr::summarize(n.top=sum(padj<0.05 & log2FoldChange>1,na.rm=TRUE),
n.bottom=sum(padj<0.05 & log2FoldChange< (-1),na.rm=TRUE)) %>%
dplyr::ungroup()
Figure_2C <- aCD3_6h_all %>%
drop_na(padj) %>%
mutate(Significant = case_when(
padj > 0.05 | (abs(log2FoldChange) < 1) ~ 'Not Sign',
padj < 0.05 & log2FoldChange > 1 ~ 'UP',
padj < 0.05 & log2FoldChange <(-1) ~ 'DOWN'
)) %>%
arrange(Significant!="Not Sign") %>%
ggplot() +
geom_point(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant), size=3) + theme_bw(base_size=16) +
scale_color_manual(values=c("UP"="firebrick2","Not Sign"="darkgrey", 'DOWN'='dodgerblue3')) +
geom_vline(xintercept = -1, colour="#990000", linetype="dashed") +
geom_vline(xintercept = 1, colour="#990000", linetype="dashed") +
facet_wrap(~factor(Organism, levels=c('CB', 'BP', 'BS', 'PD')), nrow=2) +
geom_text(data=aCD3_counts,aes(x=4, y=22,  label=n.top, size=6)) +
geom_text(data=aCD3_counts,aes(x=-3, y=22,  label=n.bottom,  size=6)) +
theme(strip.background = element_blank(), strip.text.y = element_blank())
Figure_2C
BP_all_6h <- BP_aCD36h_vs_0h %>% full_join(BP_flag6h_vs_0h, by='Gene') %>% full_join(BP_aCD36h_vs_flag6h, by='Gene') %>%
mutate(Gene_name = gsub("(.*);Name=", "", Gene)) %>% mutate(Gene_name = gsub("(\\(E.*)", "", Gene_name)) %>%
mutate(Gene_number = gsub("(;.*)" , "", Gene)) %>% mutate(Gene_number = gsub("ID=fig\\|33035.10.", "", Gene_number)) %>% mutate(Gene_number = gsub("\\|", "", Gene_number))
BS_all_6h <- BS_aCD36h_vs_0h %>% full_join(BS_flag6h_vs_0h, by='Gene') %>% full_join(BS_aCD36h_vs_flag6h, by='Gene') %>%
mutate(Gene_name = gsub("(.*);Name=", "", Gene)) %>% mutate(Gene_name = gsub("(\\(E.*)", "", Gene_name)) %>%
mutate(Gene_number = gsub("(;.*)" , "", Gene)) %>% mutate(Gene_number = gsub("ID=fig\\|33035.10.", "", Gene_number)) %>% mutate(Gene_number = gsub("\\|", "", Gene_number))
CB_all_6h <- CB_aCD36h_vs_0h %>% full_join(CB_flag6h_vs_0h, by='Gene') %>% full_join(CB_aCD36h_vs_flag6h, by='Gene') %>%
mutate(Gene_name = gsub("(.*);Name=", "", Gene)) %>% mutate(Gene_name = gsub("(\\(E.*)", "", Gene_name)) %>%
mutate(Gene_number = gsub("(;.*)" , "", Gene)) %>% mutate(Gene_number = gsub("ID=fig\\|33035.10.", "", Gene_number)) %>% mutate(Gene_number = gsub("\\|", "", Gene_number))
PD_all_6h <- PD_aCD36h_vs_0h %>% full_join(PD_flag6h_vs_0h, by='Gene') %>% full_join(PD_aCD36h_vs_flag6h, by='Gene') %>%
mutate(Gene_name = gsub("(.*);Name=", "", Gene)) %>% mutate(Gene_name = gsub("(\\(E.*)", "", Gene_name)) %>%
mutate(Gene_number = gsub("(;.*)" , "", Gene)) %>% mutate(Gene_number = gsub("ID=fig\\|33035.10.", "", Gene_number)) %>% mutate(Gene_number = gsub("\\|", "", Gene_number))
BP_aCD3_vs_flag_6h_forgg <- BP_all_6h %>% mutate(Rel_Sign = case_when(
padj < 0.05 ~ "true_dif",
padj.x < 0.05 & padj.y < 0.05 ~ "both",
padj.x < 0.05 & (padj.y > 0.05 | padj.y==NA) ~ "aCD3",
(padj.x > 0.05 | padj.x==NA) & padj.y < 0.05 ~ "flag",
(padj.x > 0.05 | padj.x==NA) & (padj.y > 0.05 | padj.y==NA) ~ "none")) %>%
mutate(FC_Sign = case_when(
log2FoldChange.x > 0 & log2FoldChange.y < 0 ~ "disc, aCD>0",
log2FoldChange.x < 0 & log2FoldChange.y > 0 ~ "disc, flag>0",
log2FoldChange.x > 0 & log2FoldChange.y > 0  ~ "both >0",
log2FoldChange.x < 0 & log2FoldChange.y < 0 ~ "both <0"))
BS_aCD3_vs_flag_6h_forgg <- BS_all_6h %>% mutate(Rel_Sign = case_when(
padj < 0.05 ~ "true_dif",
padj.x < 0.05 & padj.y < 0.05 ~ "both",
padj.x < 0.05 & (padj.y > 0.05 | padj.y==NA) ~ "aCD3",
(padj.x > 0.05 | padj.x==NA) & padj.y < 0.05 ~ "flag",
(padj.x > 0.05 | padj.x==NA) & (padj.y > 0.05 | padj.y==NA) ~ "none")) %>%
mutate(FC_Sign = case_when(
log2FoldChange.x > 0 & log2FoldChange.y < 0 ~ "disc, aCD>0",
log2FoldChange.x < 0 & log2FoldChange.y > 0 ~ "disc, flag>0",
log2FoldChange.x > 0 & log2FoldChange.y > 0  ~ "both >0",
log2FoldChange.x < 0 & log2FoldChange.y < 0 ~ "both <0"))
CB_aCD3_vs_flag_6h_forgg <- CB_all_6h %>% mutate(Rel_Sign = case_when(
padj < 0.05 ~ "true_dif",
padj.x < 0.05 & padj.y < 0.05 ~ "both",
padj.x < 0.05 & (padj.y > 0.05 | padj.y==NA) ~ "aCD3",
(padj.x > 0.05 | padj.x==NA) & padj.y < 0.05 ~ "flag",
(padj.x > 0.05 | padj.x==NA) & (padj.y > 0.05 | padj.y==NA) ~ "none")) %>%
mutate(FC_Sign = case_when(
log2FoldChange.x > 0 & log2FoldChange.y < 0 ~ "disc, aCD>0",
log2FoldChange.x < 0 & log2FoldChange.y > 0 ~ "disc, flag>0",
log2FoldChange.x > 0 & log2FoldChange.y > 0  ~ "both >0",
log2FoldChange.x < 0 & log2FoldChange.y < 0 ~ "both <0"))
PD_aCD3_vs_flag_6h_forgg <- PD_all_6h %>% mutate(Rel_Sign = case_when(
padj < 0.05 ~ "true_dif",
padj.x < 0.05 & padj.y < 0.05 ~ "both",
padj.x < 0.05 & (padj.y > 0.05 | padj.y==NA) ~ "aCD3",
(padj.x > 0.05 | padj.x==NA) & padj.y < 0.05 ~ "flag",
(padj.x > 0.05 | padj.x==NA) & (padj.y > 0.05 | padj.y==NA) ~ "none")) %>%
mutate(FC_Sign = case_when(
log2FoldChange.x > 0 & log2FoldChange.y < 0 ~ "disc, aCD>0",
log2FoldChange.x < 0 & log2FoldChange.y > 0 ~ "disc, flag>0",
log2FoldChange.x > 0 & log2FoldChange.y > 0  ~ "both >0",
log2FoldChange.x < 0 & log2FoldChange.y < 0 ~ "both <0"))
all_aCD3_vs_flag_6h_forgg <- bind_rows(BP_aCD3_vs_flag_6h_forgg, BS_aCD3_vs_flag_6h_forgg, CB_aCD3_vs_flag_6h_forgg, PD_aCD3_vs_flag_6h_forgg) %>%
mutate(Rel_Sign = case_when(
# padj < 0.05 ~ "true_dif",
padj.x < 0.05 & padj.y < 0.05 ~ "both",
padj.x < 0.05 & (padj.y > 0.05 | padj.y==NA) ~ "aCD3",
(padj.x > 0.05 | padj.x==NA) & padj.y < 0.05 ~ "flag",
(padj.x > 0.05 | padj.x==NA) & (padj.y > 0.05 | padj.y==NA) ~ "none")) %>%
mutate(FC_Sign = case_when(
log2FoldChange.x > 0 & log2FoldChange.y < 0 ~ "disc, aCD>0",
log2FoldChange.x < 0 & log2FoldChange.y > 0 ~ "disc, flag>0",
log2FoldChange.x > 0 & log2FoldChange.y > 0  ~ "both >0",
log2FoldChange.x < 0 & log2FoldChange.y < 0 ~ "both <0")) %>%
mutate(Organism = str_extract(pattern='BS|BP|CB|PD', Comparison)) %>%
arrange(Rel_Sign!="none",Rel_Sign!="aCD3",Rel_Sign!="flag") %>%
mutate(alpha=ifelse(Rel_Sign=="none",0.6,1))
pick <- function(condition){
function(d) d %>% filter_(condition)
}
Figure_3B <-
#filter(Rel_Sign != "none") %>%
ggplot(all_aCD3_vs_flag_6h_forgg, aes(x=log2FoldChange.x, y=log2FoldChange.y, colour=Rel_Sign,alpha=alpha)) +
stat_cor(inherit.aes = FALSE, mapping = aes(x=log2FoldChange.x, y=log2FoldChange.y), method="pearson", size=6) + #this is necessary as otherwise with inherited aes the value is calculated separately for the color groups!
# geom_text_repel(data=filter(all_aCD3_vs_flag_24h_forgg, Gene %in% list_glut), segment.size  = 0.4,
#                 aes(label=Gene_name)) +
#geom_hline(yintercept = 0, colour="#990000", linetype="dashed") +
#geom_vline(xintercept = 0, coloFigure 3Fur="#990000", linetype="dashed") +
geom_abline(slope=1, colour="#990000", linetype="dashed") +
geom_point(size=3) +
scale_alpha_identity() +
scale_colour_manual(values=c( "none"="darkgrey", "both"= "plum3","aCD3"="red", "flag"="#00B2FF")) +
theme_bw(base_size=18) +
theme(aspect.ratio = 1) +
#xlim(-7.5, 7.5) +
ggtitle("all 6h") +
xlab("log2FC in aCD3") +
ylab("log2FC in flagellin") +
theme(legend.text = element_text(size = 20),
strip.background = element_blank()) +
facet_wrap(~ Organism, scales = 'free', nrow=1)
Figure_3B
BS_aCD3_vs_flag_6h_forgg
BS_aCD3_vs_flag_6h_forgg <- BS_all_6h %>% mutate(Rel_Sign = case_when(
padj < 0.05 ~ "true_dif",
padj.x < 0.05 & padj.y < 0.05 ~ "both",
padj.x < 0.05 & (padj.y > 0.05 | padj.y==NA) ~ "aCD3",
(padj.x > 0.05 | padj.x==NA) & padj.y < 0.05 ~ "flag",
(padj.x > 0.05 | padj.x==NA) & (padj.y > 0.05 | padj.y==NA) ~ "none")) %>%
mutate(FC_Sign = case_when(
log2FoldChange.x > 0 & log2FoldChange.y < 0 ~ "disc, aCD>0",
log2FoldChange.x < 0 & log2FoldChange.y > 0 ~ "disc, flag>0",
log2FoldChange.x > 0 & log2FoldChange.y > 0  ~ "both >0",
log2FoldChange.x < 0 & log2FoldChange.y < 0 ~ "both <0"))
BS_aCD3_vs_flag_6h_forgg <- BS_all_6h %>% mutate(Rel_Sign = case_when(
padj < 0.05 ~ "true_dif",
padj.x < 0.05 & padj.y < 0.05 ~ "both",
padj.x < 0.05 & (padj.y > 0.05 | padj.y==NA) ~ "aCD3",
(padj.x > 0.05 | padj.x==NA) & padj.y < 0.05 ~ "flag",
(padj.x > 0.05 | padj.x==NA) & (padj.y > 0.05 | padj.y==NA) ~ "none")) %>%
mutate(FC_Sign = case_when(
log2FoldChange.x > 0 & log2FoldChange.y < 0 ~ "disc, aCD>0",
log2FoldChange.x < 0 & log2FoldChange.y > 0 ~ "disc, flag>0",
log2FoldChange.x > 0 & log2FoldChange.y > 0  ~ "both >0",
log2FoldChange.x < 0 & log2FoldChange.y < 0 ~ "both <0"))
View(BS_aCD3_vs_flag_6h_forgg)
all <- bind_rows(BP_complete_df, BS_complete_df, CB_complete_df, PD_complete_df) %>%
filter(!grepl('aCD36h_vs_flag6h|aCD324h_vs_flag24h', Comparison)) %>%
mutate(Organism = str_extract(pattern='BP|BS|CB|PD', Comparison)) %>%
#mutate(padj = coalesce(padj, 1)) %>%
mutate(Significant = case_when(
padj>0.05 | abs(log2FoldChange)<1 ~ 'not_sign',
padj<0.05 & abs(log2FoldChange)>1 ~ 'sign'))
all_6h <-  all %>%
filter(Time_point=='6h')
chaperone_6h <- all_6h %>%
ggplot(aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color = Significant), size=3) +
geom_point(data = all_6h %>% filter(grepl(("Hsp|Chaperone|chaperone|ClpB"), all_6h$Gene_name)) %>% filter(Significant=='not_sign'), fill="goldenrod1", color="black", pch=21, size=3) +
geom_point(data = all_6h %>% filter(grepl(("Hsp|Chaperone|chaperone|ClpB"), all_6h$Gene_name)) %>% filter(Significant=='sign'), fill="cornflowerblue", color="black", pch=21, size=3) +
scale_color_manual(values = c("grey85", "grey70")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
ggtitle("Chaperones") +
facet_wrap( Organism~Treatment, ncol=2) +
theme(strip.background = element_blank(),
strip.text.y = element_blank(),
strip.text.x = element_blank(),
aspect.ratio = 1)
gg_PUL_6h <- all_6h %>%
ggplot(aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color = Significant), size=3) +
geom_point(data = all_6h %>% filter(grepl(("(PUL)"), all_6h$Gene_name)) %>% filter(Significant=='not_sign'), fill="goldenrod1", color="black", pch=21, size=3) +
geom_point(data = all_6h %>% filter(grepl(("(PUL)"), all_6h$Gene_name)) %>% filter(Significant=='sign'), fill="cornflowerblue", color="black", pch=21, size=3) +
scale_color_manual(values = c("grey85", "grey70")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
ggtitle("Polysaccharide Utilization Loci") +
facet_wrap( Organism~Treatment, ncol=2) +
theme(strip.background = element_blank(),
strip.text.y = element_blank(),
strip.text.x = element_blank(),
aspect.ratio = 1)
gg_ferric_iron_transporters_6h <- all_6h %>%
ggplot(aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color = Significant), size=3) +
geom_point(data = all_6h %>% filter(grepl(("Ferric iron | ferric iron"), all_6h$Gene_name)) %>% filter(Significant=='not_sign'), fill="goldenrod1", color="black", pch=21, size=3) +
geom_point(data = all_6h %>% filter(grepl(("Ferric iron | ferric iron"), all_6h$Gene_name)) %>% filter(Significant=='sign'), fill="cornflowerblue", color="black", pch=21, size=3) +
scale_color_manual(values = c( "grey85", "grey70")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
ggtitle("Ferric iron uptake (ABC transporters and associated two-component systems)") +
facet_wrap( Treatment~Organism, nrow=2) +
theme(strip.background = element_blank(),
strip.text.y = element_blank(),
strip.text.x = element_blank(),
aspect.ratio = 1)
gg_catalases_6h <- all_6h %>%
ggplot(aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color = Significant), size=3) +
geom_point(data = all_6h %>% filter(grepl(("Catalase|catalase"), all_6h$Gene_name)) %>% filter(Significant=='not_sign'), fill="goldenrod1", color="black", pch=21, size=3) +
geom_point(data = all_6h %>% filter(grepl(("Catalase|catalase"), all_6h$Gene_name)) %>% filter(Significant=='sign'), fill="cornflowerblue", color="black", pch=21, size=3) +
scale_color_manual(values = c( "grey85", "grey70")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
ggtitle("Catalases") +
facet_wrap( Organism~Treatment, ncol=2) +
theme(strip.background = element_blank(),
strip.text.y = element_blank(),
strip.text.x = element_blank(),
aspect.ratio = 1)
gg_thioredoxin_6h <- all_6h %>%
ggplot(aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color = Significant), size=3) +
geom_point(data = all_6h %>% filter(grepl(("Thioredoxin|thioredoxin"), all_6h$Gene_name)) %>% filter(Significant=='not_sign'), fill="goldenrod1", color="black", pch=21, size=3) +
geom_point(data = all_6h %>% filter(grepl(("Thioredoxin|thioredoxin"), all_6h$Gene_name)) %>% filter(Significant=='sign'), fill="cornflowerblue", color="black", pch=21, size=3) +
scale_color_manual(values = c( "grey85", "grey70")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
ggtitle("Thioredoxin") +
facet_wrap( Treatment~Organism, nrow=2) +
theme(strip.background = element_blank(),
strip.text.y = element_blank(),
strip.text.x = element_blank(),
aspect.ratio = 1)
gg_thioredoxin_6h
gg_catalases_6h
gg_ferric_iron_transporters_6h
gg_PUL_6h
pdf('Figure_1E_filtered.pdf')
Figure_1E
dev.off()
pdf('Figure_2C_filtered.pdf')
Figure_2C
dev.off()
pdf('Figure_3B_filtered.pdf')
Figure_3B
dev.off()
View(BS_table_counts_normalized)
BP_table_counts_normalized <- counts(BP_dds, normalized=TRUE)
class(BP_table_counts_normalized)
View(CB_table_counts_normalized)
View(CB_dds)
View(CB_f6)
BP_Counts <- read.delim2('SB093_BP_Counts.txt', header = T, sep='\t')
BS_Counts <- read.delim2('SB093_BS_Counts.txt', header = T, sep='\t')
CB_Counts <- read.delim2('SB093_CB_Counts.txt', header = T, sep='\t')
PD_Counts <- read.delim2('SB093_PD_Counts.txt', header = T, sep='\t')
##### Run DeSeq2 ####
## BP
BP_colData <- as.data.frame(matrix(c("0h", "0h", "0h", "6h_flag","6h_flag", "6h_flag", "6h_aCD3", "6h_aCD3", "6h_aCD3" ,"24h_flag", "24h_flag", "24h_flag","24h_aCD3", "24h_aCD3", "24h_aCD3"),nrow=15,ncol=1))
row.names(BP_colData) <-c("BP_m1_0h", "BP_m2_0h", "BP_m3_0h", "BP_m4_6h_flag", "BP_m5_6h_flag", "BP_m6_6h_flag", "BP_m7_6h_aCD3", "BP_m8_6h_aCD3", "BP_m9_6h_aCD3", "BP_m10_24h_flag", "BP_m11_24h_flag" , "BP_m12_24h_flag" , "BP_m13_24h_aCD3", "BP_m14_24h_aCD3", "BP_m15_24h_aCD3")
colnames(BP_colData)<-c('BP_condition')
BP_countData <-  as.matrix(select(BP_Counts, BP_m1_0h, BP_m2_0h, BP_m3_0h, BP_m4_6h_flag, BP_m5_6h_flag, BP_m6_6h_flag, BP_m7_6h_aCD3, BP_m8_6h_aCD3, BP_m9_6h_aCD3, BP_m10_24h_flag, BP_m11_24h_flag , BP_m12_24h_flag , BP_m13_24h_aCD3, BP_m14_24h_aCD3, BP_m15_24h_aCD3), rownames.force=T )
## run Deseq excluding low count entries
BP_dds <- DESeqDataSetFromMatrix(countData=BP_countData, colData=BP_colData, design= ~ BP_condition)
BP_dds <- BP_dds[rowSums(counts(BP_dds)) > 10, ]
BP_dds <- DESeq(BP_dds, fitType = 'parametric')
BP_table_counts_normalized <- counts(BP_dds, normalized=TRUE)
## BS
BS_colData <- as.data.frame(matrix(c("0h", "0h", "0h", "6h_flag","6h_flag", "6h_flag", "6h_aCD3", "6h_aCD3", "6h_aCD3" ,"24h_flag", "24h_flag", "24h_flag","24h_aCD3", "24h_aCD3", "24h_aCD3"),nrow=15,ncol=1))
row.names(BS_colData) <-c("BS_m1_0h", "BS_m2_0h", "BS_m3_0h", "BS_m4_6h_flag", "BS_m5_6h_flag", "BS_m6_6h_flag", "BS_m7_6h_aCD3", "BS_m8_6h_aCD3", "BS_m9_6h_aCD3", "BS_m10_24h_flag", "BS_m11_24h_flag" , "BS_m12_24h_flag" , "BS_m13_24h_aCD3", "BS_m14_24h_aCD3", "BS_m15_24h_aCD3")
colnames(BS_colData)<-c('BS_condition')
BS_countData <-  as.matrix(select(BS_Counts, BS_m1_0h, BS_m2_0h, BS_m3_0h, BS_m4_6h_flag, BS_m5_6h_flag, BS_m6_6h_flag, BS_m7_6h_aCD3, BS_m8_6h_aCD3, BS_m9_6h_aCD3, BS_m10_24h_flag, BS_m11_24h_flag , BS_m12_24h_flag , BS_m13_24h_aCD3, BS_m14_24h_aCD3, BS_m15_24h_aCD3), rownames.force=T )
## run Deseq excluding low count entries
BS_dds <- DESeqDataSetFromMatrix(countData=BS_countData, colData=BS_colData, design= ~ BS_condition)
BS_dds <- BS_dds[rowSums(counts(BS_dds)) > 10, ]
BS_dds <- DESeq(BS_dds, fitType = 'parametric')
BS_table_counts_normalized <- counts(BS_dds, normalized=TRUE)
## CB
CB_colData <- as.data.frame(matrix(c("0h", "0h", "0h", "6h_flag","6h_flag", "6h_flag", "6h_aCD3", "6h_aCD3", "6h_aCD3" ,"24h_flag", "24h_flag", "24h_flag","24h_aCD3", "24h_aCD3", "24h_aCD3"),nrow=15,ncol=1))
row.names(CB_colData) <-c("CB_m1_0h", "CB_m2_0h", "CB_m3_0h", "CB_m4_6h_flag", "CB_m5_6h_flag", "CB_m6_6h_flag", "CB_m7_6h_aCD3", "CB_m8_6h_aCD3", "CB_m9_6h_aCD3", "CB_m10_24h_flag", "CB_m11_24h_flag" , "CB_m12_24h_flag" , "CB_m13_24h_aCD3", "CB_m14_24h_aCD3", "CB_m15_24h_aCD3")
colnames(CB_colData)<-c('CB_condition')
CB_countData <-  as.matrix(select(CB_Counts, CB_m1_0h, CB_m2_0h, CB_m3_0h, CB_m4_6h_flag, CB_m5_6h_flag, CB_m6_6h_flag, CB_m7_6h_aCD3, CB_m8_6h_aCD3, CB_m9_6h_aCD3, CB_m10_24h_flag, CB_m11_24h_flag , CB_m12_24h_flag , CB_m13_24h_aCD3, CB_m14_24h_aCD3, CB_m15_24h_aCD3), rownames.force=T )
## run Deseq excluding low count entries
CB_dds <- DESeqDataSetFromMatrix(countData=CB_countData, colData=CB_colData, design= ~ CB_condition)
CB_dds <- CB_dds[rowSums(counts(CB_dds)) > 10, ]
CB_dds <- DESeq(CB_dds, fitType = 'parametric')
CB_table_counts_normalized <- counts(CB_dds, normalized=TRUE)
## PD
PD_colData <- as.data.frame(matrix(c("0h", "0h", "0h", "6h_flag","6h_flag", "6h_flag", "6h_aCD3", "6h_aCD3", "6h_aCD3" ,"24h_flag", "24h_flag", "24h_flag","24h_aCD3", "24h_aCD3", "24h_aCD3"),nrow=15,ncol=1))
row.names(PD_colData) <-c("PD_m1_0h", "PD_m2_0h", "PD_m3_0h", "PD_m4_6h_flag", "PD_m5_6h_flag", "PD_m6_6h_flag", "PD_m7_6h_aCD3", "PD_m8_6h_aCD3", "PD_m9_6h_aCD3", "PD_m10_24h_flag", "PD_m11_24h_flag" , "PD_m12_24h_flag" , "PD_m13_24h_aCD3", "PD_m14_24h_aCD3", "PD_m15_24h_aCD3")
colnames(PD_colData)<-c('PD_condition')
PD_countData <-  as.matrix(select(PD_Counts, PD_m1_0h, PD_m2_0h, PD_m3_0h, PD_m4_6h_flag, PD_m5_6h_flag, PD_m6_6h_flag, PD_m7_6h_aCD3, PD_m8_6h_aCD3, PD_m9_6h_aCD3, PD_m10_24h_flag, PD_m11_24h_flag , PD_m12_24h_flag , PD_m13_24h_aCD3, PD_m14_24h_aCD3, PD_m15_24h_aCD3), rownames.force=T )
## run Deseq excluding low count entries
PD_dds <- DESeqDataSetFromMatrix(countData=PD_countData, colData=PD_colData, design= ~ PD_condition)
PD_dds <- PD_dds[rowSums(counts(PD_dds)) > 10, ]
PD_dds <- DESeq(PD_dds, fitType = 'parametric')
PD_table_counts_normalized <- counts(PD_dds, normalized=TRUE)
CB_colData <- as.data.frame(matrix(c("0h", "0h", "0h", "6h_flag","6h_flag", "6h_flag", "6h_aCD3", "6h_aCD3", "6h_aCD3" ,"24h_flag", "24h_flag", "24h_flag","24h_aCD3", "24h_aCD3", "24h_aCD3"),nrow=15,ncol=1))
row.names(CB_colData) <-c("CB_m1_0h", "CB_m2_0h", "CB_m3_0h", "CB_m4_6h_flag", "CB_m5_6h_flag", "CB_m6_6h_flag", "CB_m7_6h_aCD3", "CB_m8_6h_aCD3", "CB_m9_6h_aCD3", "CB_m10_24h_flag", "CB_m11_24h_flag" , "CB_m12_24h_flag" , "CB_m13_24h_aCD3", "CB_m14_24h_aCD3", "CB_m15_24h_aCD3")
colnames(CB_colData)<-c('CB_condition')
CB_countData <-  as.matrix(select(CB_Counts, CB_m1_0h, CB_m2_0h, CB_m3_0h, CB_m4_6h_flag, CB_m5_6h_flag, CB_m6_6h_flag, CB_m7_6h_aCD3, CB_m8_6h_aCD3, CB_m9_6h_aCD3, CB_m10_24h_flag, CB_m11_24h_flag , CB_m12_24h_flag , CB_m13_24h_aCD3, CB_m14_24h_aCD3, CB_m15_24h_aCD3), rownames.force=T )
## run Deseq excluding low count entries
CB_dds <- DESeqDataSetFromMatrix(countData=CB_countData, colData=CB_colData, design= ~ CB_condition)
CB_dds <- CB_dds[rowSums(counts(CB_dds)) > 10, ]
CB_dds <- DESeq(CB_dds, fitType = 'parametric')
CB_table_counts_normalized <- counts(CB_dds, normalized=TRUE)
View(CB_table_counts_normalized)
CB_aCD36h_vs_0h <- as.data.frame(results(CB_dds, contrast=c("CB_condition","6h_aCD3","0h"))) %>% rownames_to_column('Gene') %>% mutate(Comparison="CB_aCD36h_vs_0h")
View(CB_aCD36h_vs_0h)
CB_aCD36h_vs_0h %>% write.table('CB_6h_aCD3_NEW_RESULTS.txt', sep='\t', quote=F)
library(RColorBrewer)
library(DESeq2)
#library(plyr)
library(tibble)
library(pheatmap)
library(Rsubread)
library(clusterProfiler)
library(stringr)
library(ggplot2)
library(grDevices)
library(genefilter)
library(xlsx)
library(tidyr)
library(openxlsx)
library(githubinstall)
#githubinstall("yingtools2")
library(yingtools2)
#source("https://bioconductor.org/biocLite.R")
#biocLite("phyloseq")
library(phyloseq)
library(reshape2)
library(ggrepel)
library(gplots)
library(qgraph)
library(ggfortify)
library(cluster)
library(cowplot)
library(ggpubr)
library(dplyr)
library(ggsci)
help(mutate)
help(summarize)
###### save.image("SB093_rerun.RData")
#load("./SB093_rerun.RData")
setwd("/Users/becattis/Desktop/SB093_rerun/")
###### save.image("SB093_rerun.RData")
load("./SB093_rerun.RData")
BP_aCD36h_vs_0h <- as.data.frame(results(BP_dds, contrast=c("BP_condition","6h_aCD3","0h"))) %>% rownames_to_column('Gene') %>% mutate(Comparison="BP_aCD36h_vs_0h")
CB_aCD36h_vs_0h <- as.data.frame(results(CB_dds, contrast=c("CB_condition","6h_aCD3","0h"))) %>% rownames_to_column('Gene') %>% mutate(Comparison="CB_aCD36h_vs_0h")
View(CB_aCD36h_vs_0h)
CB_aCD36h_vs_0h %>% write.table('CB_6h_aCD3_OLD_RESULTS.txt', sep='\t', quote=F)
library(RColorBrewer)
library(tibble)
library(pheatmap)
library(Rsubread)
library(clusterProfiler)
library(stringr)
library(ggplot2)
library(grDevices)
library(genefilter)
library(xlsx)
library(tidyr)
library(openxlsx)
library(reshape2)
library(ggrepel)
library(gplots)
library(ggfortify)
library(cluster)
library(cowplot)
library(ggpubr)
library(ggsci)
library(dplyr)
library(DESeq2)
setwd('/Users/becattis/Desktop/CHM revision/Scripts to be uploaded/CBBP-transcriptomics/Transcriptomics is SPF CBBP (aCD3 and flagellin)/')
#save.image('CBBP_main.RData')
load('CBBP_main.RData')
### to run this need .gff files in working directory,
### as well as a 'SAM_BAM_ALIGNMENTS' folder that contains all bowtie2 alignments files (.bam) obtained with the enclosed bash script
### the first step (FeatureCounts) can be avoided by directly reading in the relative df, here provided as .txt tables
# prepare .gff files
library(RColorBrewer)
library(tibble)
library(pheatmap)
library(Rsubread)
library(clusterProfiler)
library(stringr)
library(ggplot2)
library(grDevices)
library(genefilter)
library(xlsx)
library(tidyr)
library(openxlsx)
library(reshape2)
library(ggrepel)
library(gplots)
library(ggfortify)
library(cluster)
library(cowplot)
library(ggpubr)
library(ggsci)
library(dplyr)
library(DESeq2)
setwd('/Users/becattis/Desktop/CHM revision/Scripts to be uploaded/CBBP-transcriptomics/Transcriptomics is SPF CBBP (aCD3 and flagellin)/')
#save.image('CBBP_main.RData')
load('CBBP_main.RData')
### to run this need .gff files in working directory,
### as well as a 'SAM_BAM_ALIGNMENTS' folder that contains all bowtie2 alignments files (.bam) obtained with the enclosed bash script
### the first step (FeatureCounts) can be avoided by directly reading in the relative df, here provided as .txt tables
# prepare .gff files
BP <- read.delim("BP.gff", header=T)
BS <- read.delim("BS.gff", header=T)
CB <- read.delim("CB.gff", header=T)
PD <- read.delim("PD.gff", header=T)
# run the following if aligning raw reads from scratch using the provided bash script, skip otherwise
#BS_list <- list.files("/MyFolder/SAM_BAM_ALIGNMENTS", pattern = "BS.only_aligned.bam")
#BP_list <- list.files("/MyFolder/SAM_BAM_ALIGNMENTS", pattern = "BP.only_aligned.bam")
#CB_list <- list.files("/MyFolder/SAM_BAM_ALIGNMENTS", pattern = "CB.only_aligned.bam")
#PD_list <- list.files("/MyFolder/SAM_BAM_ALIGNMENTS", pattern = "PD.only_aligned.bam")
#### the following codes generate raw data for each CBBP members
#### following are codes to generate cumulative figures
##### BP Count ####
## count aligning reads using Feature counts (skip if simply reading in the relative .txt)
#BP_FtCounts <- featureCounts(BP_list, annot.ext = BP, isGTFAnnotationFile=FALSE, largestOverlap =T, countChimericFragments=TRUE)
#BP_Counts <- as.data.frame(BP_FtCounts$counts) %>% select(-1)
#colnames(BP_Counts) <- str_replace(colnames(BP_Counts), '_sb93', '')
#colnames(BP_Counts) <- str_extract(colnames(BP_Counts), regex(pattern="Sample_m[0-9]{1,2}_[0-9]{1,2}h_flag|Sample_m[0-9]{1,2}_[0-9]{1,2}h_aCD3|Sample_m[0-9]{1}_0h"))
#colnames(BP_Counts) <- str_replace(colnames(BP_Counts), 'Sample_', 'BP_')
## reorder columns
#BP_Counts <- BP_Counts[,c("BP_m1_0h", "BP_m2_0h", "BP_m3_0h", "BP_m4_6h_flag", "BP_m5_6h_flag", "BP_m6_6h_flag", "BP_m7_6h_aCD3", "BP_m8_6h_aCD3", "BP_m9_6h_aCD3", "BP_m10_24h_flag", "BP_m11_24h_flag" , "BP_m12_24h_flag" , "BP_m13_24h_aCD3", "BP_m14_24h_aCD3", "BP_m15_24h_aCD3")]
## remove tRNA/rRNA reads
#BP_Counts$feature <- row.names(BP_Counts)
#BP_Counts <- BP_Counts %>% filter(!grepl(pattern="tRNA-[A-Z, a-z]{3}-[A-Z, a-z]{3}" , BP_Counts$feature))
#BP_Counts <- BP_Counts %>% filter(!grepl(pattern="LSU rRNA|SSU rRNA|5S rRNA" , BP_Counts$feature))
#rownames(BP_Counts) <- BP_Counts$feature
#BP_Counts$feature <- NULL
## read in the counts table generated by the above script
BP_Counts <- read.delim2('SB093_BP_Counts.txt', header = T, sep='\t')
BS_Counts <- read.delim2('SB093_BS_Counts.txt', header = T, sep='\t')
CB_Counts <- read.delim2('SB093_CB_Counts.txt', header = T, sep='\t')
PD_Counts <- read.delim2('SB093_PD_Counts.txt', header = T, sep='\t')
##### Run DeSeq2 ####
## BP
BP_colData <- as.data.frame(matrix(c("0h", "0h", "0h", "6h_flag","6h_flag", "6h_flag", "6h_aCD3", "6h_aCD3", "6h_aCD3" ,"24h_flag", "24h_flag", "24h_flag","24h_aCD3", "24h_aCD3", "24h_aCD3"),nrow=15,ncol=1))
row.names(BP_colData) <-c("BP_m1_0h", "BP_m2_0h", "BP_m3_0h", "BP_m4_6h_flag", "BP_m5_6h_flag", "BP_m6_6h_flag", "BP_m7_6h_aCD3", "BP_m8_6h_aCD3", "BP_m9_6h_aCD3", "BP_m10_24h_flag", "BP_m11_24h_flag" , "BP_m12_24h_flag" , "BP_m13_24h_aCD3", "BP_m14_24h_aCD3", "BP_m15_24h_aCD3")
colnames(BP_colData)<-c('BP_condition')
BP_countData <-  as.matrix(select(BP_Counts, BP_m1_0h, BP_m2_0h, BP_m3_0h, BP_m4_6h_flag, BP_m5_6h_flag, BP_m6_6h_flag, BP_m7_6h_aCD3, BP_m8_6h_aCD3, BP_m9_6h_aCD3, BP_m10_24h_flag, BP_m11_24h_flag , BP_m12_24h_flag , BP_m13_24h_aCD3, BP_m14_24h_aCD3, BP_m15_24h_aCD3), rownames.force=T )
## run Deseq excluding low count entries
BP_dds <- DESeqDataSetFromMatrix(countData=BP_countData, colData=BP_colData, design= ~ BP_condition)
BP_dds <- BP_dds[rowSums(counts(BP_dds)) > 10, ]
BP_dds <- DESeq(BP_dds, fitType = 'parametric')
BP_table_counts_normalized <- counts(BP_dds, normalized=TRUE)
## BS
BS_colData <- as.data.frame(matrix(c("0h", "0h", "0h", "6h_flag","6h_flag", "6h_flag", "6h_aCD3", "6h_aCD3", "6h_aCD3" ,"24h_flag", "24h_flag", "24h_flag","24h_aCD3", "24h_aCD3", "24h_aCD3"),nrow=15,ncol=1))
row.names(BS_colData) <-c("BS_m1_0h", "BS_m2_0h", "BS_m3_0h", "BS_m4_6h_flag", "BS_m5_6h_flag", "BS_m6_6h_flag", "BS_m7_6h_aCD3", "BS_m8_6h_aCD3", "BS_m9_6h_aCD3", "BS_m10_24h_flag", "BS_m11_24h_flag" , "BS_m12_24h_flag" , "BS_m13_24h_aCD3", "BS_m14_24h_aCD3", "BS_m15_24h_aCD3")
colnames(BS_colData)<-c('BS_condition')
BS_countData <-  as.matrix(select(BS_Counts, BS_m1_0h, BS_m2_0h, BS_m3_0h, BS_m4_6h_flag, BS_m5_6h_flag, BS_m6_6h_flag, BS_m7_6h_aCD3, BS_m8_6h_aCD3, BS_m9_6h_aCD3, BS_m10_24h_flag, BS_m11_24h_flag , BS_m12_24h_flag , BS_m13_24h_aCD3, BS_m14_24h_aCD3, BS_m15_24h_aCD3), rownames.force=T )
## run Deseq excluding low count entries
BS_dds <- DESeqDataSetFromMatrix(countData=BS_countData, colData=BS_colData, design= ~ BS_condition)
BS_dds <- BS_dds[rowSums(counts(BS_dds)) > 10, ]
BS_dds <- DESeq(BS_dds, fitType = 'parametric')
BS_table_counts_normalized <- counts(BS_dds, normalized=TRUE)
## CB
CB_colData <- as.data.frame(matrix(c("0h", "0h", "0h", "6h_flag","6h_flag", "6h_flag", "6h_aCD3", "6h_aCD3", "6h_aCD3" ,"24h_flag", "24h_flag", "24h_flag","24h_aCD3", "24h_aCD3", "24h_aCD3"),nrow=15,ncol=1))
row.names(CB_colData) <-c("CB_m1_0h", "CB_m2_0h", "CB_m3_0h", "CB_m4_6h_flag", "CB_m5_6h_flag", "CB_m6_6h_flag", "CB_m7_6h_aCD3", "CB_m8_6h_aCD3", "CB_m9_6h_aCD3", "CB_m10_24h_flag", "CB_m11_24h_flag" , "CB_m12_24h_flag" , "CB_m13_24h_aCD3", "CB_m14_24h_aCD3", "CB_m15_24h_aCD3")
colnames(CB_colData)<-c('CB_condition')
CB_countData <-  as.matrix(select(CB_Counts, CB_m1_0h, CB_m2_0h, CB_m3_0h, CB_m4_6h_flag, CB_m5_6h_flag, CB_m6_6h_flag, CB_m7_6h_aCD3, CB_m8_6h_aCD3, CB_m9_6h_aCD3, CB_m10_24h_flag, CB_m11_24h_flag , CB_m12_24h_flag , CB_m13_24h_aCD3, CB_m14_24h_aCD3, CB_m15_24h_aCD3), rownames.force=T )
## run Deseq excluding low count entries
CB_dds <- DESeqDataSetFromMatrix(countData=CB_countData, colData=CB_colData, design= ~ CB_condition)
CB_dds <- CB_dds[rowSums(counts(CB_dds)) > 10, ]
CB_dds <- DESeq(CB_dds, fitType = 'parametric')
CB_table_counts_normalized <- counts(CB_dds, normalized=TRUE)
## PD
PD_colData <- as.data.frame(matrix(c("0h", "0h", "0h", "6h_flag","6h_flag", "6h_flag", "6h_aCD3", "6h_aCD3", "6h_aCD3" ,"24h_flag", "24h_flag", "24h_flag","24h_aCD3", "24h_aCD3", "24h_aCD3"),nrow=15,ncol=1))
row.names(PD_colData) <-c("PD_m1_0h", "PD_m2_0h", "PD_m3_0h", "PD_m4_6h_flag", "PD_m5_6h_flag", "PD_m6_6h_flag", "PD_m7_6h_aCD3", "PD_m8_6h_aCD3", "PD_m9_6h_aCD3", "PD_m10_24h_flag", "PD_m11_24h_flag" , "PD_m12_24h_flag" , "PD_m13_24h_aCD3", "PD_m14_24h_aCD3", "PD_m15_24h_aCD3")
colnames(PD_colData)<-c('PD_condition')
PD_countData <-  as.matrix(select(PD_Counts, PD_m1_0h, PD_m2_0h, PD_m3_0h, PD_m4_6h_flag, PD_m5_6h_flag, PD_m6_6h_flag, PD_m7_6h_aCD3, PD_m8_6h_aCD3, PD_m9_6h_aCD3, PD_m10_24h_flag, PD_m11_24h_flag , PD_m12_24h_flag , PD_m13_24h_aCD3, PD_m14_24h_aCD3, PD_m15_24h_aCD3), rownames.force=T )
## run Deseq excluding low count entries
PD_dds <- DESeqDataSetFromMatrix(countData=PD_countData, colData=PD_colData, design= ~ PD_condition)
PD_dds <- PD_dds[rowSums(counts(PD_dds)) > 10, ]
PD_dds <- DESeq(PD_dds, fitType = 'parametric')
PD_table_counts_normalized <- counts(PD_dds, normalized=TRUE)
class(CB_table_counts_normalized)
a <- as.data.frame(CB_table_counts_normalized)
View(a)
as.data.frame(CB_table_counts_normalized) %>% rownames_to_column('Gene') %>% write.table('CB_norm_counts_DDS.txt', sep='\t', quote=F)
